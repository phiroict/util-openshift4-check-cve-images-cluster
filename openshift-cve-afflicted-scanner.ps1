# Get the namespaces and strip the 'namespaces/' string

$installed_namespaces = (oc get ns -o name) | ForEach-Object {$($_ -split "/")[1]}

# Get the CVEs for this cluster
$afflicted_packages = @()
$cve_url = "https://access.redhat.com/hydra/rest/securitydata/cve.json?after=20220101per_page=1000&page=1&product=openshift&package=openshift4"
$result = Invoke-WebRequest $cve_url | ConvertFrom-Json
foreach ($item in $result) {
    $cve = $item.CVE
    $severity = $item.severity
    $desc = $item.bugzilla_description
    $score = $item.cvss3_score
    $affected_packages = $item.affected_packages
    # The list of affected packages may contain a list so split these up as well
    foreach ($affected_package in $affected_packages) {
       
        $afflicted_packages += $affected_package       
    }
}
$afflicted_packages = $afflicted_packages | Select-Object -Unique

function Normalize_Image_Name( $imageName ) {
    $slashCount = $($imageName -split "/").Count
    if ($slashCount -gt 2){
        $imageName = $($imageName -Split "/") | Select-Object -Skip 1
        $imageName = $imageName -join "/"

    }
    return $imageName
}


function Get_Version_From_Hash( $podName, $namespace, $imageName ) {
    
    $apmCount = $($imageName -split "@").Count
    if ($ampCount -eq 1){
        return $imageName
    }
    $image_parts = $imageName -split "@"
    $image_ids = (oc describe pod $podName -n $namespace | Select-String 'Image:' | Select-String $image_parts[0])    
    $image_ids = $image_ids -Split (' {2,}')
    return $image_ids[2]

}

$processed_images = @()

foreach ($namespace in $installed_namespaces){
    try {
      $pods = (oc get pods -n $namespace -o json) | ConvertFrom-Json
    } catch {
      Write-Output "Could not process $($namespace), json parse error"
      continue
    }
    $podcount = $pods.items.Count
    if ($podcount -gt 0) {
      Write-Output "Number of pods in $($namespace) is $($pods.items.Count)"
      foreach ($pod in $pods.items) {
        $containers = $pod.spec.containers
        foreach ($container in $containers) {
            $image = $container.image
            $normalized_image = Normalize_Image_Name($image)
            $installed_image = Get_Version_From_Hash $pod.metadata.name $namespace $normalized_image
            $installed_image = Normalize_Image_name($installed_image)
            Write-Output "--> rewritten $($pod.metadata.name) has image $($installed_image)"
            if (-not $processed_images.Contains($installed_image)){
                if ($affected_packages.Contains($installed_image)) {
                    Write-Output "++> WARNING Image is in CVE warning"
                } else {
                    Write-Output "--> info - Image is not in CVE warning"
                }
                $processed_images += $installed_image
            }        
        }
      }
    }
}